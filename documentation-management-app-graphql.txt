⭐ Start the management app project
✅ create package.json
✅ npm init -y

----------------------------------------

⭐ install the dependencies
✅ npm install express express-graphql graphql mongoose cors colors 

----------------------------------------

⭐ install another dev dependencies
✅ npm install -D nodemon dotenv  
nodemon - to run the app in the background
dotenv - to load the environment variables

----------------------------------------

⭐ making a folder name server
⭐ inside the server make a file name index.js

const express = require('express');
const port = process.env.PORT || 5000;

const app = express();

----------------------------------------

⭐ create .env file
NODE_ENV = 'development'
PORT = 5000
✅ for the .env to work then in index.js add this line
require('dotenv').config();
💥 test with this line ---> app.listen(port, console.log(`Server running on port ${port}`));
💥 and change the package.json script from test to
✅ 'start': 'node server/index.js',
✅ 'dev': 'nodemon server/index.js',

👉 npm run dev

----------------------------------------

⭐ working on index.js
⭐ create a schema folder inside server folder
⭐ inside the schema folder make a file name schema.js
✅ working with schema.js

----------------------------------------

localhost:5000/graphql

# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
✅ Prettify Query:  Shift-Ctrl-P (or press the prettify button above)
✅ Merge Query:  Shift-Ctrl-M (or press the merge button above)
✅ Run Query:  Ctrl-Enter (or press the play button above)
✅ Auto Complete:  Ctrl-Space (or just start typing)

----------------------------------------

to take 1 data || single object

{
  project(id: "1") {
    name
    status
    description
    client {
      name
      id
    }
  }
}

or to take all query

{
  projects {
    name
    status
    description
  }
}

----------------------------------------

⭐ working with database mongoDB
💥 dont forget to set the network IP address to connect
or set 0.0.0.0/0 to allow all connections

✅ create project
✅ create users
✅ from collections create own data
✅ create database
✅ connect to mongoDB compass
✅ and connect to application
✅ copy the code
✅ mongodb+srv://cxkeeley:<password>@cluster0.bbzkd.mongodb.net/?retryWrites=true&w=majority
✅ go to .env
✅ and add the following lines
✅ change the <password> with password
✅ add your database name to the end of mongodb.net/<database_name>?

----------------------------------------

⭐ to connect database
✅ go to server folder and create a folder name config
✅ create db.js
✅ create an async function because mongoose return promises
✅ because this bring color 'cyan.underline.bold'
✅ then go to index.js
✅ add const colors = require ('colors');
✅ finally back to db.js and add module.export
✅ and add const connectDB = require('./config/db') in index.js
✅ finally call connectDB();

✅ we should see at the console terminal
✅ MongoDB Connected: cluster0-shard-00-00.bbzkd.mongodb.net

--------------------------------

⭐ next is create a mongoose model
✅ go to server folder and add a folder call models
✅ and create file name Client.js
✅ mongoose schema nothing to do with graphql
✅ think like layer and on top of mongoose is graphql API
✅ working at Client.js
✅ and export it as a mongoose model
  | module.exports = mongoose.model('Client', ClientSchema);
✅ make again 1 file model under name Project.js

--------------------------------

✅ next in schema.js
✅ const Project = require('../models/Project');
const Client = require('../models/Client');
✅ change

✅ return projects; to-> 
✅ return Project.find();

✅ return projects.find(project => project.id === args.id); to->
✅ return Project.findById(args.id);

✅ return Clients; to->
✅ same with client

✅ and in projecttype
✅ return Client.findById(parent.clientId);

✅ create mutation inside of schema.js
✅ create addClient
✅ create deleteClient
✅ create addProject
✅ create deleteProject
✅ create updateProject

-----------------------------------------------

⭐ Working on frontend
💥 npx create-react-app client

// install dependencies
✅ npm install @apollo/client graphql react-router-dom react-icons

----------------------------------------------

✅ working with src folder
✅ delete the App.css and logo.svg
✅ clean all inside the App.js

✅ create components folder
✅ create assets folder inside

✅ copy the index.css and paste the custom index.css
✅ change the title at index.html inside the public folder

⭐ using bootstrap
✅ copy and paste the bootstrap CDN at index.HTML

⭐ working with components folder
✅ create Header.jsx
✅ using snippet rfc
✅ delete the import react from 'react';
✅ import logo
✅ working at header.jsx

------------------------------------------------

⭐ setting up apollo
✅ import { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client' in App.js
✅ wrap the App() return with <ApolloProvider></ApolloProvider>

⭐ making a Clients.jsx
✅ rfc save it for now and bring it to App.js
✅ working with Clients.jsx

💥 dont forget to set up CORS at index.js
const cors = require('cors');

app.use(cors());

